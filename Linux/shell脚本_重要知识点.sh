#1 将一个命令的执行结果赋给变量
	A=`ls -la` 反引号，运行里面的命令，并把结果返回给变量A
	A=$(ls -la) 等价于反引号
	eg:  aa=$((4+5))
　　bb=`expr 4 + 5 ` //数字要运算就加上expr
 
#2 将一个变量赋给另一个变量
　  eg : A=$STR

#3 显示当前日期
　　echo `date +%Y%m%d`　//20200611 注意Y是大写,+前面有空格,后面没有空格, %Y中间可以加-
　　#也可以只输出`date +%Y` 2020(只输出年)

#4 awk 可以输出某一列(字段)
   ifconfig | grep broadcast | awk '{print $6}' #列数是从1开始

#5 sed 替换内容等(还有很多有用的信息)
   ff="adddd:456232563" echo $ff | sed 's/adddd://g'  #将adddd:替换成空  sed 's/adddd:/+/g' 将adddd:替换成+
   ll | awk '{print $9}' | grep -v '^$' #输出当前目录下的文件名(去除空行)
   sed 's/^/& /' #在行前添加空格
   
#6 grep相关操作
	-i 忽略大小写
	-o 只输出匹配到的部分(而不是整个行)
	-v 反向选择，即输出没有没有匹配的行  grep -v '^[a-zA-Z].*' #输出不是以字母开始的行
	-c 计算找到的符号行的次数
	-n 顺便输出行号

#7 if 双括号法
   if [[ $score == 0 || ($score > 4 && $score < 8) ]]; then
   
#8 符号$后的括号
	#: ${a} 变量a的值, 在不引起歧义的情况下可以省略大括号
	#: $((exp)) 和`expr exp`效果相同, 计算数学表达式exp的数值,三目运算符和逻辑表达式都可以计算
	#: (()) 增强括号的用法, 常用于算术运算比较. 双括号中的变量可以不使用$符号前缀, 只要括号中的表达式符合C语言运算规则, 支持多个表达式用逗号分开.
	#: 比如可以直接使用for((i=0;i<5;i++)), 如果不使用双括号, 则为for i in `seq 0 4`或者for i in {0..4}.
	#: 再如可以直接使用if (($i<5)), 如果不使用双括号, 则为if [[ $i < 5 ]]
	
#9 多条命令执行
	#: (cmd1;cmd2;cmd3) 新开一个子shell顺序执行命令cmd1,cmd2,cmd3, 各命令之间用分号隔开, 最后一个命令后可以没有分号.
	#: { cmd1;cmd2;cmd3;} 在当前shell顺序执行命令cmd1,cmd2,cmd3, 各命令之间用分号隔开, 最后一个命令后必须有分号, 第一条命令和左括号之间必须用空格隔开.
	#: 对{}和()而言, 括号中的重定向符只影响该条命令, 而括号外的重定向符影响到括号中的所有命令.
	
#10 定义数组
    A=(test1,test2,test3)
